{"version":3,"sources":["api.js","Components/PostView.js","App.js","serviceWorker.js","index.js"],"names":["axios","defaults","baseURL","getAllPosts","get","createPost","data","post","deletePost","id","delete","String","PostView","this","props","title","content","Component","App","handlingChange","event","setState","target","name","value","handlingSubmit","a","async","preventDefault","api","state","result","console","log","getPosts","handlingDelete","results","_results","className","Container","maxWidth","Paper","onSubmit","TextField","label","onChange","variant","multiline","rows","Button","color","type","map","Card","CardContent","Typography","key","CardActions","onClick","size","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0UAEAA,IAAMC,SAASC,QAAU,4BAEV,OAGXC,YAHW,WAIP,OAAOH,IAAMI,IAAI,YAIrBC,WARW,SAQAC,GACP,OAAON,IAAMO,KAAK,UAAWD,IAGjCE,WAZW,SAYAC,GACP,OAAOT,IAAMU,OAAO,UAAUC,OAAOF,MCVxBG,E,iLACP,IAAD,EACwBC,KAAKC,MAA3BL,EADF,EACEA,GAAIM,EADN,EACMA,MAAOC,EADb,EACaA,QAClB,OACI,6BACKP,EACD,4BAAKM,GACL,2BAAIC,Q,GAPkBC,a,uEC2FvBC,E,YAhFb,WAAYJ,GAAQ,IAAD,8BACjB,4CAAMA,KAmBRK,eAAiB,SAACC,GAChB,EAAKC,SAAL,eAAgBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SArBhC,EAwBnBC,eAAiB,SAAOL,GAAP,eAAAM,EAAAC,OAAA,uDACfP,EAAMQ,iBADS,WAAAF,EAAA,MAEIG,EAAIxB,WAAW,CAACU,MAAM,EAAKe,MAAMf,MAAOC,QAAQ,EAAKc,MAAMd,WAF/D,OAEXe,EAFW,OAGfC,QAAQC,IAAI,sBAAQF,GACpB,EAAKV,SAAS,CAACN,MAAM,GAAIC,QAAQ,KACjC,EAAKkB,WALU,sCAxBE,EAgCnBC,eAAiB,SAAO1B,GAAP,SAAAiB,EAAAC,OAAA,kEAAAD,EAAA,MACTG,EAAIrB,WAAWC,IADN,OAEf,EAAKyB,WAFU,sCA9Bf,EAAKJ,MAAQ,CACXf,MAAO,GACPC,QAAS,GACToB,QAAS,IALM,E,iFAUjBvB,KAAKqB,a,mIAIkBL,EAAI1B,e,OAArBkC,E,OACNL,QAAQC,IAAII,GAEZxB,KAAKQ,SAAS,CAACe,QAAQC,EAAS/B,O,gFAoBxB,IAAD,OACT,OACI,yBAAKgC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAWC,SAAS,MACpB,yBAAKF,UAAU,eACf,kBAACG,EAAA,EAAD,CAAOH,UAAU,gBACf,yFACA,0BAAMA,UAAU,cAAcI,SAAU7B,KAAKY,gBAG7C,kBAACkB,EAAA,EAAD,CAAWL,UAAU,iBAAiBf,KAAK,QAAQqB,MAAM,QAAQpB,MAAOX,KAAKiB,MAAMf,MAAO8B,SAAUhC,KAAKM,eAAgB2B,QAAQ,aAEjI,kBAACH,EAAA,EAAD,CAAWlC,GAAG,iBAAiBc,KAAK,UAAUwB,WAAS,EAACC,KAAK,IAAIJ,MAAM,UAAUpB,MAAOX,KAAKiB,MAAMd,QAAS6B,SAAUhC,KAAKM,eAAgB2B,QAAQ,aAGjJ,kBAACG,EAAA,EAAD,CAAQH,QAAQ,YAAYI,MAAM,UAAUC,KAAK,UAAjD,+BAIJ,yBAAKb,UAAU,eAEXzB,KAAKiB,MAAMM,QAAQgB,KAAI,SAAC7C,GAAD,OAEvB,kBAAC8C,EAAA,EAAD,CAAMf,UAAW,QACjB,kBAACgB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAUC,IAAKjD,EAAKE,GAAIA,GAAIF,EAAKE,GAAIM,MAAOR,EAAKQ,MAAOC,QAAST,EAAKS,YAG1E,kBAACyC,EAAA,EAAD,KACE,kBAACR,EAAA,EAAD,CAAQC,MAAM,YAAYQ,QAAS,SAACtC,GAAD,OAAS,EAAKe,eAAe5B,EAAKE,KAAKkD,KAAK,SAA/E,wC,GApEIC,IAAM3C,WCLJ4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.df34ffc0.chunk.js","sourcesContent":["import axios from \"axios\"\r\n\r\naxios.defaults.baseURL = \"http://127.0.0.1:8000/api\"\r\n\r\nexport default {\r\n\r\n    // 모든 글 불러오기\r\n    getAllPosts() {\r\n        return axios.get('/posts/')\r\n    },\r\n\r\n    // 글 작성하기\r\n    createPost(data) {\r\n        return axios.post('/posts/', data)\r\n    },\r\n\r\n    deletePost(id) {\r\n        return axios.delete('/posts/'+String(id))\r\n    }\r\n\r\n\r\n}","import React, { Component } from 'react'\r\n\r\nconst dummy_prop = {\r\n    title: '테스트용 타이틀입니다',\r\n    content: '테스트용 글입니다'\r\n}\r\n\r\nexport default class PostView extends Component {\r\n    render() {\r\n        const {id, title, content} = this.props\r\n        return (\r\n            <div>\r\n                {id}\r\n                <h3>{title}</h3>\r\n                <p>{content}</p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport api from './api';\nimport PostView from './Components/PostView'\n\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      title: '',\n      content: '',\n      results: [],\n    }\n  }\n\n  componentDidMount() {\n    this.getPosts()\n  }\n\n  async getPosts() {\n    const _results = await api.getAllPosts()\n    console.log(_results)\n    // _results.data 없음\n    this.setState({results:_results.data})\n  }\n\n  handlingChange = (event) => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  handlingSubmit = async (event) => {\n    event.preventDefault() // event의 고유 기능 -> 막는다\n    let result = await api.createPost({title:this.state.title, content:this.state.content})\n    console.log(\"완료됨!\", result)\n    this.setState({title:'', content:''})\n    this.getPosts()\n  }\n\n  handlingDelete = async (id) => {\n    await api.deletePost(id)\n    this.getPosts()\n  }\n\n  render() {\n  return (\n      <div className=\"App\">\n        <Container maxWidth=\"lg\">\n        <div className=\"PostSection\">\n        <Paper className=\"PostingPaper\">\n          <h2>대나무 숲 글 작성하기</h2>\n          <form className=\"PostingForm\" onSubmit={this.handlingSubmit}>\n\n\n          <TextField className=\"outlined-basic\" name=\"title\" label=\"title\" value={this.state.title} onChange={this.handlingChange} variant=\"outlined\" />\n\n          <TextField id=\"outlined-basic\" name=\"content\" multiline rows=\"4\" label=\"content\" value={this.state.content} onChange={this.handlingChange} variant=\"outlined\" />\n\n\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">제출하기</Button>\n            </form>\n          </Paper>\n        </div>\n        <div className=\"ViewSection\">\n          {\n            this.state.results.map((post) =>\n\n            <Card className={'card'}>\n            <CardContent>\n              <Typography>\n                <PostView key={post.id} id={post.id} title={post.title} content={post.content} />\n              </Typography>\n            </CardContent>\n            <CardActions>\n              <Button color=\"secondary\" onClick={(event)=>this.handlingDelete(post.id)} size=\"small\">삭제하기</Button>\n            </CardActions>\n          </Card>\n            )\n          }\n          \n        </div>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}